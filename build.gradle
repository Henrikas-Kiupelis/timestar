import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import static javax.xml.bind.JAXB.unmarshal

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE"
        classpath "org.jooq:jooq-codegen:3.6.2"
        classpath 'javax.mail:javax.mail-api:1.5.4'
        classpath "mysql:mysql-connector-java:5.1.34"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'application'

jar {
    baseName = 'timestar'
    version = '3.1.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/gen/java"]
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework:spring-context"
    
    compile 'org.springframework.security:spring-security-web:4.0.2.RELEASE'
	compile 'org.springframework.security:spring-security-config:4.0.2.RELEASE'

    compile 'org.springframework:spring-context-support:4.2.2.RELEASE'
    compile 'javax.mail:javax.mail-api:1.5.4'
    
    compile "org.jooq:jooq-codegen:3.6.2"
    compile "mysql:mysql-connector-java:5.1.34"
    compile "c3p0:c3p0:0.9.1.2"
    compile "joda-time:joda-time:2.8.2"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.1'
    compile 'com.google.guava:guava:18.0'
    compile 'org.jooq:jool:0.9.7';
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.github.ben-manes.caffeine:caffeine:1.3.3'
    compile 'com.github.ben-manes.caffeine:guava:1.3.3'
    compile 'com.github.ben-manes.caffeine:jcache:1.3.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'org.assertj:assertj-core:3.2.0'
    testCompile "org.hibernate:hibernate-validator:5.1.3.Final"
    testCompile "com.jayway.jsonpath:json-path:2.0.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task generate << {
	//use like this: gradle generate -PschemaProp=NAME_OF_SCHEMA -PusrProp=USERNAME -PpwdProp=PASSWORD
	
	// Use your favourite XML builder to construct the code generation configuration file
	// ----------------------------------------------------------------------------------
	def schema = schemaProp
	def usr = usrProp
	def pwd = pwdProp
	def writer = new StringWriter()
	new MarkupBuilder(writer)
	.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
		jdbc() {
			driver('com.mysql.jdbc.Driver')
			url("jdbc:mysql://localhost:3306/${schema}")
			user("${usr}")
			password("${pwd}")
		}
		generator() {
			database() {
				name('org.jooq.util.mysql.MySQLDatabase');
				includes('.*')
				inputSchema("${schema}")
			}
			generate() {}
			target() {
				packageName("${schema}")
				directory('src/gen/java')
			}
		}
	}
	
	// Run the code generator
	// ----------------------
    GenerationTool.generate(
		unmarshal(
			new StringReader(writer.toString()),
			org.jooq.util.jaxb.Configuration.class
		)
	)
}
