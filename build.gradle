import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import static javax.xml.bind.JAXB.unmarshal

buildscript {
	ext {
        springBootVersion = '1.2.5.RELEASE'
        mysqlConnectorVersion = '5.1.34'
        jooqVersion = '3.6.1'
        hybernateValidatorVersion = '5.1.3.Final'
        jsonPathVersion = '2.0.0'
        javaMailVersion = '1.4.7'
        jodaTimeVersion = '2.8.1';
        jacksonVersion = '2.5.4';
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "mysql:mysql-connector-java:${mysqlConnectorVersion}"
        classpath "org.jooq:jooq-codegen:${jooqVersion}"
        classpath "org.hibernate:hibernate-validator:${hybernateValidatorVersion}"
        classpath "com.jayway.jsonpath:json-path:${jsonPathVersion}"
        classpath "javax.mail:mail:${javaMailVersion}"
        classpath "joda-time:joda-time:${jodaTimeVersion}"
        classpath "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'application'

jar {
    baseName = 'timestar'
    version = '0.5.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework:spring-context"
    
    compile 'org.springframework.security:spring-security-web:4.0.1.RELEASE'
	compile 'org.springframework.security:spring-security-config:4.0.1.RELEASE'
    
    compile "org.jooq:jooq:3.6.1"
    compile "org.jooq:jooq-meta:3.6.1"
    compile "org.jooq:jooq-codegen:3.6.1"
    compile "mysql:mysql-connector-java:5.1.34"
    compile "c3p0:c3p0:0.9.1.2"
    
    compile "javax.mail:mail:1.4.7"

    compile "joda-time:joda-time:2.8.1"

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.5.4'

    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    
    testCompile "org.hibernate:hibernate-validator:5.1.3.Final"
    testCompile "com.jayway.jsonpath:json-path:2.0.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task showTestTaskClasspath << {
    //noinspection GrUnresolvedAccess
    test.classpath.each { println it }
}

task generate << {
	//use like this: gradle generate -PschemaProp=NAME_OF_SCHEMA -PusrProp=USERNAME -PpwdProp=PASSWORD
	
	// Use your favourite XML builder to construct the code generation configuration file
	// ----------------------------------------------------------------------------------
	def schema = schemaProp
	def usr = usrProp
	def pwd = pwdProp
	def writer = new StringWriter()
	new MarkupBuilder(writer)
	.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
		jdbc() {
			driver('com.mysql.jdbc.Driver')
			url("jdbc:mysql://localhost:3306/${schema}")
			user("${usr}")
			password("${pwd}")
		}
		generator() {
			database() {
				name('org.jooq.util.mysql.MySQLDatabase');
				includes('.*')
				inputSchema("${schema}")
			}
			generate() {}
			target() {
				packageName("com.superum.db.generated.${schema}")
				directory('src/main/java')
			}
		}
	}
	
	// Run the code generator
	// ----------------------
    //noinspection GrDeprecatedAPIUsage
    GenerationTool.main(
		unmarshal(
			new StringReader(writer.toString()),
			org.jooq.util.jaxb.Configuration.class
		)
	)
}