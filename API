API V2:

First of all, the API is partitioned. This basically means that depending on the user who is accessing the API,
a different portion of the database will be used. All API calls are available only for the user's partition, with
the exception of the partition API itself.
Generally, this means that the username authorization is slightly more complicated (partition id must be added to the
auth header) - this might be changed at a later date - but for all intents and purposes, every partition functions
in exactly the same manner.

Secondly, all APIv2 calls will have the following prefix, unless stated otherwise:

    http://{IP}:{PORT}/timestar/api/v2/

The API might switch to HTTPS eventually.

All the methods will be given in this format (example):

(1)    GET  /lesson/table/{pageId}
(2)         pageId      int            0 < pageId <= MAX_INT
(3)    OPT  per_page    int            0 < per_page <= 100; DEF 6
(4)    OPT  start_date  java.sql.Date  any; DEF today
(5)    OPT  end_date    java.sql.Date  any; DEF start_date
(6)    RET  com.superum.db.lesson.table.core.LessonTable

GET refers to the HTTP method the request expects;
/lesson/table are constant mappings, which should always be in the request;
/{pageId} is a mutable mapping; it must also always be in the request, but just like a normal parameter,
    it can have different values and has certain limitations;
(2) shows what the limitations for {pageId} are; specifically, that it is an integer and must be positive;
(3) to (5) show parameters; REQ means that the parameter must be in the request, whereas OPT means that
this parameter can be skipped; finally, if the parameter is optional, then it WILL provide the default value
using the

    ; DEF

modifier; in this case, if per_page is not present, it defaults to 6; if start_date is not present, it defaults to
today's date; if end_date is not present, it defaults to start_date
(which will be today's date, if it also was not present)
(6) shows what kind of Class object is returned by the request, assuming it is successful; JSON format is used in all
methods, unless stated otherwise; please refer to the appropriate Class documentation
One more modifier exists:

    BODY

which means that the method expects HTTP Body part; it also specifies a particular Class, just like RET.

Finally, all API methods expect an auth header, unless stated otherwise;
Currently (2015-07-20) a BASIC auth header is used:

    Authentication: Basic base64(username:password)

It is important to note, that username takes the following form:

    partitionId.actualUsername

This allows same username/email/etc to be used in separate partitions;
This will be changed into a more secure scheme at a later date, when the basic functionality of the app has been
realized and somewhat tested.

Next, there will be a short description of the method, including:
1) what the method does; if there's any special behaviour it is necessarily described here;
2) when will the method fail, and what error response you can expect as a result;
   obvious failures, such as breaking the limitations of parameters or failing to provide requires ones are omitted;
3) the structure/meaning of the returned value; this can be described in 1) if it makes sense to do so;

Customer API:

1)
    POST  /customer/create
    BODY  com.superum.api.customer.ValidCustomerDTO
    RET   com.superum.api.customer.ValidCustomerDTO

    Creates a new customer;

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;

    Returned FullCustomer will have its id field set;

2)
    GET  /customer/{customerId}
         customerId     int            0 < customerId <= MAX_INT
    RET  com.superum.api.customer.ValidCustomerDTO

    Reads and returns an existing customer;

    It will fail if:
    a) HTTP 404; no customer with provided id exists;

3)
    POST  /customer/update
    BODY  com.superum.api.customer.ValidCustomerDTO
    RET   com.superum.api.customer.ValidCustomerDTO

    Updates an existing customer; only fields that are sent are updated;

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no customer with provided id exists;

    Returned FullCustomer contains all the fields as they were before updating;

4)
    DELETE  /customer/delete/{customerId}
            customerId     int            0 < customerId <= MAX_INT
    RET     com.superum.api.customer.ValidCustomerDTO

    Deletes an existing customer;

    It will fail if:
    a) HTTP 404; no customer with provided id exists;

    Returned FullCustomer contains all the fields as they were before deleting;

5)
    GET  customer/for/teacher/{teacherId}
         teacherId      int            0 < teacherId <= MAX_INT
    OPT  page           int            0 < page <= MAX_INT; DEF 1
    OPT  per_page       int            0 < per_page <= 100; DEF 25
    RET  List<com.superum.api.customer.ValidCustomerDTO>

    Reads and returns a list of customers for a certain teacher;
    To determine if a certain customer is tied to a teacher, the following examination is made:
    1) customers have students;
    2) students are in groups;
    3) teachers are responsible for groups;
    4) so, a customer is tied to a teacher if they have any students in any groups that the teacher is responsible for;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 customers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a customer is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  customer/all
    OPT  page           int            0 < page <= MAX_INT; DEF 1
    OPT  per_page       int            0 < per_page <= 100; DEF 25
    RET  List<com.superum.api.customer.ValidCustomerDTO>

    Reads and returns a list of all customers;

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 customers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a customer is deleted, the results of this query will no longer be consistent with the ones before the deletion;

7)
    GET  customer/for/teacher/{teacherId}/count
         teacherId      int            0 < teacherId <= MAX_INT
    RET  int

    Counts and returns the amount of all customers for a certain teacher;
    To determine if a certain customer is tied to a teacher, the following examination is made:
    1) customers have students;
    2) students are in groups;
    3) teachers are responsible for groups;
    4) so, a customer is tied to a teacher if they have any students in any groups that the teacher is responsible for;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

8)
    GET  customer/all/count
    RET  int

    Counts and returns the amount of all customers;

    It shouldn't fail under normal circumstances;

9)
    POST  customer/exists
    BODY  com.superum.api.customer.ValidCustomerDTO
    RET   com.superum.api.customer.ValidCustomerDTO

    Checks if a customer with specified bounds exists;
    The simplest use case is to check if a customer with a particular id exists, or checking if a certain customer's
    fields are set to some value;

    It will fail if:
    a) HTTP 400; no fields were set;
    b) HTTP 404; no customers for given fields were found;

    Returned FullCustomer is any single customer that match all the criteria. The only scenario where uniqueness is
    guaranteed is when the id field is set.

Teacher API:

1)
    POST  /teacher/create
    BODY  com.superum.api.teacher.FullTeacher
    RET   com.superum.api.teacher.FullTeacher

    Creates a new teacher;
    also creates an Account for this teacher, with a randomly generated password, which is sent to the e-mail
    specified inside the FullTeacher

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;
    c) HTTP 500; the email is already taken in the partition of the request;

    Returned FullTeacher will have its id field set;

2)
    GET  /teacher/{teacherId}
         teacherId      int            0 < teacherId <= MAX_INT
    RET  com.superum.api.teacher.FullTeacher

    Reads and returns an existing teacher;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

3)
    POST  /teacher/update
    BODY  com.superum.api.teacher.FullTeacher
    RET   com.superum.api.teacher.FullTeacher

    Updates an existing teacher; only fields that are sent are updated;

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no teacher with provided id exists;
    d) HTTP 500; the email is already taken in the partition of the request;

    Returned FullTeacher contains all the fields as they were before updating;

4)
    DELETE  /teacher/delete/{teacherId}
            teacherId      int            0 < teacherId <= MAX_INT
    RET     com.superum.api.teacher.FullTeacher

    Deletes an existing teacher;
    also deletes the Account of this teacher;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

    Returned FullTeacher contains all the fields as they were before deleting;

5)
    GET  teacher/all
    OPT  page           int            0 < page <= MAX_INT; DEF 1
    OPT  per_page       int            0 < per_page <= 100; DEF 25
    RET  List<com.superum.api.teacher.FullTeacher>

    Reads and returns a list of all teachers;

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 teachers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a teacher is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  teacher/all/count
    RET  int

    Counts and returns the amount of all teachers;

    It shouldn't fail under normal circumstances;

7)
    POST  teacher/exists
    BODY  com.superum.api.teacher.FullTeacher
    RET   com.superum.api.teacher.FullTeacher

    Checks if a teacher with specified bounds exists;
    The simplest use case is to check if a teacher with a particular id exists, or checking if a certain teacher's
    fields are set to some value;

    It will fail if:
    a) HTTP 400; no fields were set;
    b) HTTP 404; no teachers for given fields were found;

    Returned FullTeacher is any single teacher that match all the criteria. The only scenario where uniqueness is
    guaranteed is when the id field is set.

Group API:

1)
    PUT   group
    BODY  com.superum.api.group.ValidGroupDTO
    RET   com.superum.api.group.ValidGroupDTO

    Creates a new group

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;

    Returned group will have its id field set

2)
    POST  group
    BODY  com.superum.api.group.ValidGroupDTO
    RET   void

    Updates a group

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no group with provided id exists;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE  group/{groupId}
            groupId        int            0 < groupId <= MAX_INT
    RET     void

    Deletes a group

    It will fail if:
    a) HTTP 400; group cannot be deleted because it is still used;
    a) HTTP 404; no group with provided id exists;

    Returns HTTP 200 OK if it succeeds

4)
    GET  group/{groupId}
         groupId        int            0 < groupId <= MAX_INT
    RET  com.superum.api.group.ValidGroupDTO

    Reads and returns a group by id

    It will fail if:
    a) HTTP 404; no group with provided id exists;

5)
    GET  group
    OPT  page           int            0 < page <= MAX_INT; DEF 1
    OPT  per_page       int            0 < per_page <= 100; DEF 25
    RET  List<com.superum.api.group.ValidGroupDTO>

    Reads and returns a list of all groups

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 groups will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a group is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  group/{tableName}/{id}
         tableName      String         teacher or customer
         id             int            0 < id <= MAX_INT
    OPT  page           int            0 < page <= MAX_INT; DEF 1
    OPT  per_page       int            0 < per_page <= 100; DEF 25
    RET  List<com.superum.api.group.ValidGroupDTO>

    Reads and returns a list of groups for teacher or customer

    It will fail if:
    a) HTTP 404; no teacher or customer with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 groups will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a group is deleted, the results of this query will no longer be consistent with the ones before the deletion;

Account API:

1)
    POST  admin/add
    BODY  com.superum.api.account.ValidAccount
    RET   com.superum.api.account.ValidAccount

    Creates a new admin account in the same partition as the request;

    It will fail if:
    a) HTTP 400; username or password were not set;
    b) HTTP 500; the username is already taken;

    Returned ValidAccount will not contain additional information about the account, or the password

2)
    POST  update
    BODY  com.superum.api.account.ValidAccount
    RET   com.superum.api.account.ValidAccount

    Updates an existing account; only password field is updated;
    you can only update the account using the credentials of the account being updated;

    It will fail if:
    a) HTTP 400; username or password were not set;
    b) HTTP 401; the request was made using another account's credentials;
    c) HTTP 404; an account with given username does not exist;
    d) HTTP 500; the username is already taken;

    Returned ValidAccount contains all the fields as they were before updating, except password;

3)
    GET  info
    REQ  username       String         any, username.length() <= 60
    RET  com.superum.api.account.ValidAccount

    Reads and returns an existing account;

    It will fail if:
    a) HTTP 404; an account with given username does not exist;

    Returned ValidAccount contains all the fields, except password;

Partition API:

1)

Files API:

1)



API V1:

Below is a rough explanation of v1 API; for all intents and purposes it is deprecated, with the exception of everything,
that is also documented above;

PREFIX:

http://{IP}:{PORT}

POST /pictures/upload
POST /documents/upload
GET /pictures/{pictureName}
GET /documents/{documentName}
DELETE /pictures/{pictureName}
DELETE /documents/{documentName}

PREFIX:

http://{IP}:{PORT}/timestar/api

/add - pridėti naują
/{id} - rodyti pagal ID (žiūrėti šitą JSON formatui)
/update - pataisyti (taisomos visos reikšmės išskyrūs ID!)
/delete/{id} - ištrinti pagal ID
/all - rodyti visus
/{table}/{id} - rodyti visus tam tikram apribojimui, pvz /teacher/customer/1 - rodo visus mokytojus įmonei, kurios ID = 1

------------------------------------------------------------------------------------
Teacher:

POST /teacher/add
GET /teacher/{id}
POST /teacher/update
DELETE /teacher/delete/{id}
GET /teacher/all

------------------------------------------------------------------------------------
Teacher language:

POST /teacher/lang/add
GET /teacher/lang/{teacherId}
POST /teacher/lang/update
GET /teacher/lang/delete/{teacherId}
POST /teacher/lang/delete

------------------------------------------------------------------------------------
Teacher contract:

POST /teacher/contract/add
GET /teacher/contract/{teacherId}
POST /teacher/contract/update
GET /teacher/contract/delete/{teacherId}

------------------------------------------------------------------------------------
Customer:

POST /customer/add
GET /customer/{id}
POST /customer/update
GET /customer/delete/{id}
GET /customer/teacher/{teacherId}
GET /customer/all

------------------------------------------------------------------------------------
Customer contract:

POST /customer/contract/add
GET /customer/contract/{customerId}
POST /customer/contract/update
GET /customer/contract/delete/{customerId}

------------------------------------------------------------------------------------
Group:

POST /group/add
GET /group/{id}
POST /group/update
GET /group/delete/{id}
GET /group/customer/{customerId}
GET /group/teacher/{teacherId}
GET /group/customer/{customerId}/teacher/{teacherId}
GET /group/all

------------------------------------------------------------------------------------
Student:

POST /student/add
GET /student/{id}
POST /student/update
GET /student/delete/{id}
GET /student/customer/{customerId}
GET /student/group/{groupId}
GET /student/lesson/{lessonId}

------------------------------------------------------------------------------------
Lesson:

POST /lesson/add
GET /lesson/{id}
POST /lesson/update
GET /lesson/delete/{id}

GET /lesson/teacher/{teacherId}
GET /lesson/customer/{customerId}
GET /lesson/group/{groupId}
optional: ?start={Date}&end={Date}
/lesson/teacher/1
/lesson/customer/1?start=2015-06-01
/lesson/group/1?end=2015-06-30
/lesson/teacher/1?start=2015-06-01&end=2015-06-30

------------------------------------------------------------------------------------
Attendance:

POST lesson/attendance/add
GET lesson/attendance/{lessonId}
POST lesson/attendance/update
GET lesson/attendance/delete/{lessonId}
POST lesson/attendance/delete

------------------------------------------------------------------------------------
Lesson table:

GET /lesson/table
GET /lesson/table/{page}
optional: ?per_page={int}&start={Date}&end={Date}
/lesson/table
/lesson/table/0?per_page=100
/lesson/table/1?start=2015-06-26
/lesson/table/100?start=2015-06-26&end=2015-07-26

