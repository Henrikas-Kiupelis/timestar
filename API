API V2:

First of all, the API is partitioned. This basically means that depending on the user who is accessing the API,
a different portion of the database will be used. All API calls are available only for the user's partition, with
the exception of the partition API itself.
Generally, this means that the username authorization is slightly more complicated (partition id must be added to the
auth header) - this might be changed at a later date - but for all intents and purposes, every partition functions
in exactly the same manner.

Secondly, all APIv2 calls will have the following prefix, unless stated otherwise:

    http://{IP}:{PORT}/timestar/api/v2/

The API might switch to HTTPS eventually.

All the methods will be given in this format (example):

(1)    GET  /lesson/table/{pageId}
(2)         pageId      int            0 < pageId <= MAX_INT
(3)    OPT  per_page    int            0 < per_page <= 100; DEF 6
(4)    OPT  start_date  java.sql.Date  any; DEF today
(5)    OPT  end_date    java.sql.Date  any; DEF start_date
(6)    RET  com.superum.db.lesson.table.core.LessonTable

GET refers to the HTTP method the request expects;
/lesson/table are constant mappings, which should always be in the request;
/{pageId} is a mutable mapping; it must also always be in the request, but just like a normal parameter,
    it can have different values and has certain limitations;
(2) shows what the limitations for {pageId} are; specifically, that it is an integer and must be positive;
(3) to (5) show parameters; REQ means that the parameter must be in the request, whereas OPT means that
this parameter can be skipped; finally, if the parameter is optional, then it WILL provide the default value
using the

    ; DEF

modifier; in this case, if per_page is not present, it defaults to 6; if start_date is not present, it defaults to
today's date; if end_date is not present, it defaults to start_date
(which will be today's date, if it also was not present)
(6) shows what kind of Class object is returned by the request, assuming it is successful; JSON format is used in all
methods, unless stated otherwise; please refer to the appropriate Class documentation
One more modifier exists:

    BODY

which means that the method expects HTTP Body part; it also specifies a particular Class, just like RET.

Finally, all API methods expect an auth header, unless stated otherwise;
Currently (2015-07-20) a BASIC auth header is used:

    Authentication: Basic base64(username:password)

It is important to note, that username takes the following form:

    partitionId.actualUsername

This allows same username/email/etc to be used in separate partitions;
This will be changed into a more secure scheme at a later date, when the basic functionality of the app has been
realized and somewhat tested.

Next, there will be a short description of the method, including:
1) what the method does; if there's any special behaviour it is necessarily described here;
2) when will the method fail, and what error response you can expect as a result;
   obvious failures, such as breaking the limitations of parameters or failing to provide requires ones are omitted;
3) the structure/meaning of the returned value; this can be described in 1) if it makes sense to do so;

Customer API:

1)
    PUT   /customer
    BODY  com.superum.api.customer.ValidCustomerDTO
    RET   com.superum.api.customer.ValidCustomerDTO

    Creates a new customer;

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;

    Returned FullCustomer will have its id field set;

2)
    GET  /customer/{customerId}
         customerId     int            1 <= customerId <= MAX_INT
    RET  com.superum.api.customer.ValidCustomerDTO

    Reads and returns an existing customer;

    It will fail if:
    a) HTTP 404; no customer with provided id exists;

3)
    POST  /customer
    BODY  com.superum.api.customer.ValidCustomerDTO
    RET   void

    Updates an existing customer; only fields that are sent are updated;

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no customer with provided id exists;

    Returns HTTP 200 OK if it succeeds

4)
    DELETE  /customer/{customerId}
            customerId     int            1 <= customerId <= MAX_INT
    RET     void

    Deletes an existing customer;

    It will fail if:
    a) HTTP 404; no customer with provided id exists;

    Returns HTTP 200 OK if it succeeds

5)
    GET  /customer/teacher/{teacherId}
         teacherId      int            1 <= teacherId <= MAX_INT
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.customer.ValidCustomerDTO>

    Reads and returns a list of customers for a certain teacher;
    To determine if a certain customer is tied to a teacher, the following examination is made:
    1) customers have students;
    2) students are in groups;
    3) teachers are responsible for groups;
    4) so, a customer is tied to a teacher if they have any students in any groups that the teacher is responsible for;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 customers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a customer is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  /customer
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.customer.ValidCustomerDTO>

    Reads and returns a list of all customers;

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 customers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a customer is deleted, the results of this query will no longer be consistent with the ones before the deletion;

7)
    GET  /customer/teacher/{teacherId}/count
         teacherId      int            1 <= teacherId <= MAX_INT
    RET  int

    Counts and returns the amount of all customers for a certain teacher;
    To determine if a certain customer is tied to a teacher, the following examination is made:
    1) customers have students;
    2) students are in groups;
    3) teachers are responsible for groups;
    4) so, a customer is tied to a teacher if they have any students in any groups that the teacher is responsible for;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

8)
    GET  /customer/count
    RET  int

    Counts and returns the amount of all customers;

    It shouldn't fail under normal circumstances;

Teacher API:

1)
    PUT   /teacher
    BODY  com.superum.api.teacher.FullTeacher
    RET   com.superum.api.teacher.FullTeacher

    Creates a new teacher;
    also creates an Account for this teacher, with a randomly generated password, which is sent to the e-mail
    specified inside the FullTeacher

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;
    c) HTTP 409; the email is already taken in the partition of the request;

    Returned FullTeacher will have its id field set;

2)
    GET  /teacher/{teacherId}
         teacherId      int            1 <= teacherId <= MAX_INT
    RET  com.superum.api.teacher.FullTeacher

    Reads and returns an existing teacher;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

3)
    POST  /teacher
    BODY  com.superum.api.teacher.FullTeacher
    RET   void

    Updates an existing teacher; only fields that are sent are updated;

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no teacher with provided id exists;
    d) HTTP 409; the email is already taken in the partition of the request;

    Returns HTTP 200 OK if it succeeds

4)
    DELETE  /teacher/{teacherId}
            teacherId      int            1 <= teacherId <= MAX_INT
    RET     void

    Deletes an existing teacher;
    also deletes the Account of this teacher;

    It will fail if:
    a) HTTP 404; no teacher with provided id exists;

    Returns HTTP 200 OK if it succeeds

5)
    GET  /teacher
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.teacher.FullTeacher>

    Reads and returns a list of all teachers;

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 teachers will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a teacher is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  /teacher/count
    RET  int

    Counts and returns the amount of all teachers;

    It shouldn't fail under normal circumstances;

Group API:

1)
    PUT   /group
    BODY  com.superum.api.group.ValidGroupDTO
    RET   com.superum.api.group.ValidGroupDTO

    Creates a new group

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;

    Returned group will have its id field set

2)
    POST  /group
    BODY  com.superum.api.group.ValidGroupDTO
    RET   void

    Updates a group

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no group with provided id exists;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE  /group/{groupId}
            groupId        int            1 <= groupId <= MAX_INT
    RET     void

    Deletes a group

    It will fail if:
    a) HTTP 400; group cannot be deleted because it is still used;
    a) HTTP 404; no group with provided id exists;

    Returns HTTP 200 OK if it succeeds

4)
    GET  /group/{groupId}
         groupId        int            1 <= groupId <= MAX_INT
    RET  com.superum.api.group.ValidGroupDTO

    Reads and returns a group by id

    It will fail if:
    a) HTTP 404; no group with provided id exists;

5)
    GET  /group
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.group.ValidGroupDTO>

    Reads and returns a list of all groups

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 groups will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a group is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  /group/{tableName}/{id}
         tableName      String         teacher, customer or student
         id             int            1 <= id <= MAX_INT
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.group.ValidGroupDTO>

    Reads and returns a list of groups for teacher, customer or student

    It will fail if:
    a) HTTP 404; no teacher, customer or student with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 groups will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a group is deleted, the results of this query will no longer be consistent with the ones before the deletion;

Student API:

1)
    PUT   /student
    BODY  com.superum.api.student.ValidStudentDTO
    RET   com.superum.api.student.ValidStudentDTO

    Creates a new student

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;
	c) HTTP 400; both or neither of customerId and startDate were set;

    Returned student will have its id field set

2)
    POST  /student
    BODY  com.superum.api.student.ValidStudentDTO
    RET   void

    Updates a student

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
	c) HTTP 400; both or neither of customerId and startDate were set;
    d) HTTP 404; no student with provided id exists;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE  /student/{studentId}
            studentId        int            1 <= studentId <= MAX_INT
    RET     void

    Deletes a student

    It will fail if:
    a) HTTP 400; student cannot be deleted because it is still used;
    a) HTTP 404; no student with provided id exists;

    Returns HTTP 200 OK if it succeeds

4)
    GET  /student/{studentId}
         studentId        int            1 <= studentId <= MAX_INT
    RET  com.superum.api.student.ValidStudentDTO

    Reads and returns a student by id

    It will fail if:
    a) HTTP 404; no student with provided id exists;

5)
    GET  /student
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.student.ValidStudentDTO>

    Reads and returns a list of all students

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 students will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a student is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  /student/{tableName}/{id}
         tableName      String         group, lesson or customer
         id             int            1 <= id <= MAX_INT
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    RET  List<com.superum.api.student.ValidStudentDTO>

    Reads and returns a list of students for group, lesson or customer

    It will fail if:
    a) HTTP 404; no group, lesson or customer with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 students will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a student is deleted, the results of this query will no longer be consistent with the ones before the deletion;

Grouping API:

1)
    PUT   /grouping
    BODY  com.superum.api.grouping.ValidGroupingDTO
    RET   void

    Creates a grouping of students into a group;

    It will fail if:
    a) HTTP 404; if a record for given group/student ids doesn't exist;
    b) HTTP 409; if this group already has a grouping;

    Returns HTTP 200 OK if it succeeds

2)
    POST  /grouping
    BODY  com.superum.api.grouping.ValidGroupingDTO
    RET   void

    Updates a grouping of students into a group;

    It will fail if:
    a) HTTP 404; if a record for given group/student ids doesn't exist;
	b) HTTP 404; if this group doesn't have a grouping yet;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE   /grouping/{field}/{id}
             field      String      group or student
             id         int         1 <= id <= MAX_INT
    RET      void

    Deletes all records of grouping for given field;

    It will fail if:
    a) HTTP 404; if a record for given group/student ids doesn't exist;
	b) HTTP 404; if this group/student doesn't have a grouping yet;

    Returns HTTP 200 OK if it succeeds

Lesson API:

1)
    PUT   /lesson
    BODY  com.superum.api.lesson.ValidLessonDTO
    RET   com.superum.api.lesson.ValidLessonDTO

    Creates a new lesson

    It will fail if:
    a) HTTP 400; the id field was set;
    b) HTTP 400; a mandatory field was not set;

    Returned lesson will have its id field set

2)
    POST  /lesson
    BODY  com.superum.api.lesson.ValidLessonDTO
    RET   void

    Updates a lesson

    It will fail if:
    a) HTTP 400; the id field was not set;
    b) HTTP 400; only the id field was set and no other fields were;
    c) HTTP 404; no lesson with provided id exists;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE  /lesson/{lessonId}
            lessonId        long           1 <= lessonId <= MAX_LONG
    RET     void

    Deletes a lesson

    It will fail if:
    a) HTTP 400; lesson cannot be deleted because it is still used;
    a) HTTP 404; no lesson with provided id exists;

    Returns HTTP 200 OK if it succeeds

4)
    GET  /lesson/{lessonId}
         lessonId        long           1 <= lessonId <= MAX_LONG
    RET  com.superum.api.lesson.ValidLessonDTO

    Reads and returns a lesson by id

    It will fail if:
    a) HTTP 404; no lesson with provided id exists;

5)
    GET  /lesson
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    OPT  time_zone      String         any time zone; DEF UTC
    OPT  start_date     String         any Date; DEF today evaluated at time_zone
    OPT  end_date       String         any Date; DEF start_date
    OPT  start          long           0 <= page <= MAX_LONG; DEF start_date evaluated at 00:00:00 for time_zone
    OPT  end            long           0 <= page <= MAX_LONG; DEF (end_date + 1) evaluated at 00:00:00 for time_zone
    RET  List<com.superum.api.lesson.ValidLessonDTO>

    Reads and returns a list of all lessons for given parameters;
    The parameters are evaluated as such:
    a) If start and end values are given, they are used;
    b) If any of them is not given, they are calculated from other parameters, then used;

    It shouldn't fail under normal circumstances;

    Returned List is paged; using DEF parameter values, only first 25 lessons will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a lesson is deleted, the results of this query will no longer be consistent with the ones before the deletion;

6)
    GET  /lesson/{tableName}/{id}
         tableName      String         teacher, customer, group or student
         id             long           1 <= id <= MAX_LONG
    OPT  page           int            1 <= page <= MAX_INT; DEF 1
    OPT  per_page       int            1 <= per_page <= 100; DEF 25
    OPT  time_zone      String         any time zone; DEF UTC
    OPT  start_date     String         any Date; DEF today evaluated at time_zone
    OPT  end_date       String         any Date; DEF start_date
    OPT  start          long           0 <= page <= MAX_LONG; DEF start_date evaluated at 00:00:00 for time_zone
    OPT  end            long           0 <= page <= MAX_LONG; DEF (end_date + 1) evaluated at 00:00:00 for time_zone
    RET  List<com.superum.api.lesson.ValidLessonDTO>

    Reads and returns a list of lessons for teacher, customer, group or student for given parameters;
    The parameters are evaluated as such:
    a) If start and end values are given, they are used;
    b) If any of them is not given, they are calculated from other parameters, then used;

    It will fail if:
    a) HTTP 404; no record for given table with provided id exists;

    Returned List is paged; using DEF parameter values, only first 25 lessons will be returned; to access the rest,
    the page parameter must be incremented, or per_page value raised;
    If a lesson is deleted, the results of this query will no longer be consistent with the ones before the deletion;

Attendance API:

1)
    PUT   /lesson/attendance
    BODY  com.superum.api.attendance.ValidLessonAttendanceDTO
    RET   void

    Creates attendance record for a lesson;

    It will fail if:
    a) HTTP 400; if any of the students do not belong to the group this lesson was for;
    b) HTTP 404; if a record for given lesson/student ids doesn't exist;
    c) HTTP 409; if this lesson already has an attendance record

    Returns HTTP 200 OK if it succeeds

2)
    POST  /lesson/attendance
    BODY  com.superum.api.attendance.ValidLessonAttendanceDTO
    RET   void

    Updates attendance record for a lesson;

    It will fail if:
    a) HTTP 400; if any of the students do not belong to the group this lesson was for;
    b) HTTP 404; if a record for given lesson/student ids doesn't exist;
    c) HTTP 404; if this lesson doesn't have an attendance record yet;

    Returns HTTP 200 OK if it succeeds

3)
    DELETE   /lesson/attendance/{field}/{id}
             field      String      lesson or student
             id         long        1 <= id <= MAX_LONG
    RET      void

    Deletes all records of attendance for given field;

    It will fail if:
    a) HTTP 404; if a record for given lesson/student ids doesn't exist;
    b) HTTP 404; if this lesson/student doesn't have an attendance record yet;

    Returns HTTP 200 OK if it succeeds

Lesson table API:

1)
    GET   /lesson/table
    OPT  per_page       int            1 <= page <= 12; DEF 6
    OPT  time_zone      String         any time zone; DEF UTC
    OPT  start_date     String         any Date; DEF today evaluated at time_zone
    OPT  end_date       String         any Date; DEF start_date
    OPT  start          long           0 <= page <= MAX_LONG; DEF start_date evaluated at 00:00:00 for time_zone
    OPT  end            long           0 <= page <= MAX_LONG; DEF (end_date + 1) evaluated at 00:00:00 for time_zone
    RET  com.superum.api.table.core.OptimizedLessonTableDTO

    Delegates the call to /lesson/table/1 using same parameters

2)
    GET  /lesson/table/{page}
         page           int            1 <= page <= MAX_INT
    OPT  per_page       int            1 <= page <= 12; DEF 6
    OPT  time_zone      String         any time zone; DEF UTC
    OPT  start_date     String         any Date; DEF today evaluated at time_zone
    OPT  end_date       String         any Date; DEF start_date
    OPT  start          long           0 <= page <= MAX_LONG; DEF start_date evaluated at 00:00:00 for time_zone
    OPT  end            long           0 <= page <= MAX_LONG; DEF (end_date + 1) evaluated at 00:00:00 for time_zone
    RET  com.superum.api.table.core.OptimizedLessonTableDTO

    Returns the lesson table for given parameters;
    The parameters are evaluated as such:
    a) If start and end values are given, they are used;
    b) If any of them is not given, they are calculated from other parameters, then used;

    It shouldn't fail under normal circumstances;

Account API:

1)
    PUT   /account
    BODY  com.superum.api.account.ValidAccountDTO
    RET   com.superum.api.account.ValidAccountDTO

    Creates a new admin account in the same partition as the request;

    It will fail if:
    a) HTTP 400; username or password were not set;
    b) HTTP 500; the username is already taken;

    Returned ValidAccount will not contain additional information about the account, or the password

2)
    POST  /account
    BODY  com.superum.api.account.ValidAccountDTO
    RET   com.superum.api.account.ValidAccountDTO

    Updates an existing account; only password field is updated;
    you can only update the account using the credentials of the account being updated;

    It will fail if:
    a) HTTP 400; username or password were not set;
    b) HTTP 401; the request was made using another account's credentials;
    c) HTTP 404; an account with given username does not exist;
    d) HTTP 500; the username is already taken;

    Returned ValidAccount contains all the fields as they were before updating, except password;

3)
    GET  /account
    REQ  username       String         any, username.length() <= 60
    RET  com.superum.api.account.ValidAccountDTO

    Reads and returns an existing account;

    It will fail if:
    a) HTTP 404; an account with given username does not exist;

    Returned ValidAccount contains all the fields, except password;

Partition API:

1)
    PUT   /partition
    BODY  com.superum.api.partition.ValidPartitionDTO
    RET   com.superum.api.partition.ValidPartitionDTO

    Creates a new partition; it is also returned;

    It will fail if:
    a) HTTP 500; the id or name of partition is already taken;

Misc API:

1)
    GET  misc/time/zones
    RET  Set<String>

    Returns the set of valid timezones, used by JodaTime;

    It shouldn't fail under normal circumstances;

2)
    GET  misc/time
    RET  long

    Returns current epoch milliseconds

    It shouldn't fail under normal circumstances;

3)
    GET  misc/time/convert
    OPT  time_zone      String          any time zone; DEF UTC
    OPT  date           String          any Date; DEF today evaluated at time_zone
    OPT  hour           int             0 <= hour; DEF 0
    OPT  minute         int             0 <= minute; DEF 0
    OPT  second         int             0 <= second; DEF 0
    OPT  millisecond    int             0 <= millisecond; DEF 0
    RET  long

    Returns epoch milliseconds evaluated for given parameters, using JodaTime;

    It will fail if:
    a) HTTP 500; hour, minute, second and millisecond add up to more than a day;

Files API:

THIS API DOES NOT USE THE DEFAULT PREFIX!
Instead, the prefix is

    http://{IP}:{PORT}

1)
    POST  /{folder}/upload
          folder         String         documents or pictures
    REQ   name           String         basic name of the file (should not contain extension, i.e. .txt)
    REQ   file           MultipartFile  file being uploaded
    RET   String

    Uploads a file to the folder and returns its name, adjusted like this:

        name + "current epoch millis" + "file extension from MultipartFile"

    If it fails, it will return an error message; it will fail if:
    a) "documents" folder file exceeds 5MB;
    b) "pictures" folder file exceeds 1MB;
    c) couldn't save the file for some reason;

2)
    GET  /{folder}/{fileName}
         folder         String         documents or pictures
         fileName       String         name of the file
    RET  org.springframework.core.io.FileSystemResource

    Returns the file from the folder; full file name is required;

    It will fail if:
    a) HTTP 404; a file with given name does not exist in the folder;

    Pictures are returned in a way they can be displayed, whereas documents use

        "application/octet-stream"

    which allows them to be downloaded

3)
    DELETE  /{folder}/{fileName}
            folder         String         documents or pictures
            fileName       String         name of the file
    RET     void

    Deletes the file from the folder; full file name is required;

    It will fail if:
    a) HTTP 404; a file with given name does not exist in the folder;
    b) HTTP 500; file deletion failed for some reason;

API V1:

Below is a rough explanation of v1 API; for all intents and purposes it is deprecated, with the exception of everything,
that is also documented above;

PREFIX:

http://{IP}:{PORT}

POST /pictures/upload
POST /documents/upload
GET /pictures/{pictureName}
GET /documents/{documentName}
DELETE /pictures/{pictureName}
DELETE /documents/{documentName}

PREFIX:

http://{IP}:{PORT}/timestar/api

/add - pridėti naują
/{id} - rodyti pagal ID (žiūrėti šitą JSON formatui)
/update - pataisyti (taisomos visos reikšmės išskyrūs ID!)
/delete/{id} - ištrinti pagal ID
/all - rodyti visus
/{table}/{id} - rodyti visus tam tikram apribojimui, pvz /teacher/customer/1 - rodo visus mokytojus įmonei, kurios ID = 1

------------------------------------------------------------------------------------
Teacher:

POST /teacher/add
GET /teacher/{id}
POST /teacher/update
DELETE /teacher/delete/{id}
GET /teacher/all

------------------------------------------------------------------------------------
Teacher language:

POST /teacher/lang/add
GET /teacher/lang/{teacherId}
POST /teacher/lang/update
GET /teacher/lang/delete/{teacherId}
POST /teacher/lang/delete

------------------------------------------------------------------------------------
Teacher contract:

POST /teacher/contract/add
GET /teacher/contract/{teacherId}
POST /teacher/contract/update
GET /teacher/contract/delete/{teacherId}

------------------------------------------------------------------------------------
Customer:

POST /customer/add
GET /customer/{id}
POST /customer/update
GET /customer/delete/{id}
GET /customer/teacher/{teacherId}
GET /customer/all

------------------------------------------------------------------------------------
Customer contract:

POST /customer/contract/add
GET /customer/contract/{customerId}
POST /customer/contract/update
GET /customer/contract/delete/{customerId}

------------------------------------------------------------------------------------
Group:

POST /group/add
GET /group/{id}
POST /group/update
GET /group/delete/{id}
GET /group/customer/{customerId}
GET /group/teacher/{teacherId}
GET /group/customer/{customerId}/teacher/{teacherId}
GET /group/all

------------------------------------------------------------------------------------
Student:

POST /student/add
GET /student/{id}
POST /student/update
GET /student/delete/{id}
GET /student/customer/{customerId}
GET /student/group/{groupId}
GET /student/lesson/{lessonId}

------------------------------------------------------------------------------------
Lesson:

POST /lesson/add
GET /lesson/{id}
POST /lesson/update
GET /lesson/delete/{id}

GET /lesson/teacher/{teacherId}
GET /lesson/customer/{customerId}
GET /lesson/group/{groupId}
optional: ?start={Date}&end={Date}
/lesson/teacher/1
/lesson/customer/1?start=2015-06-01
/lesson/group/1?end=2015-06-30
/lesson/teacher/1?start=2015-06-01&end=2015-06-30

------------------------------------------------------------------------------------
Attendance:

POST lesson/attendance/add
GET lesson/attendance/{lessonId}
POST lesson/attendance/update
GET lesson/attendance/delete/{lessonId}
POST lesson/attendance/delete

------------------------------------------------------------------------------------
Lesson table:

GET /lesson/table
GET /lesson/table/{page}
optional: ?per_page={int}&start={Date}&end={Date}
/lesson/table
/lesson/table/0?per_page=100
/lesson/table/1?start=2015-06-26
/lesson/table/100?start=2015-06-26&end=2015-07-26
