API V2:

First of all, the API is partitioned. This basically means that depending on the user who is accessing the API,
a different portion of the database will be used. All API calls are available only for the user's partition, with
the exception of the partition API itself.
Generally, this means that the username authorization is slightly more complicated (partition id must be added to the
auth header) - this might be changed at a later date - but for all intents and purposes, every partition functions
in exactly the same manner.

Secondly, all APIv2 calls will have the following prefix, unless stated otherwise:

    http://{IP}:{PORT}/timestar/api/v2/

The API might switch to HTTPS eventually.

All the methods will be given in this format (example):

(1)    GET  /lesson/table/{pageId}
(2)         pageId      int            0 < pageId <= MAX_INT
(3)    OPT  per_page    int            0 < per_page <= 100; DEF 6
(4)    OPT  start_date  java.sql.Date  any; DEF today
(5)    OPT  end_date    java.sql.Date  any; DEF start_date
(6)    RET  com.superum.db.lesson.table.core.LessonTable

GET refers to the HTTP method the request expects;
/lesson/table are constant mappings, which should always be in the request;
/{pageId} is a mutable mapping; it must also always be in the request, but just like a normal parameter,
    it can have different values and has certain limitations;
(2) shows what the limitations for {pageId} are; specifically, that it is an integer and must be positive;
(3) to (5) show parameters; REQ means that the parameter must be in the request, whereas OPT means that
this parameter can be skipped; finally, if the parameter is optional, then it WILL provide the default value
using the

    ; DEF

modifier; in this case, if per_page is not present, it defaults to 6; if start_date is not present, it defaults to
today's date; if end_date is not present, it defaults to start_date
(which will be today's date, if it also was not present)
(6) shows what kind of Class object is returned by the request, assuming it is successful; JSON format is used in all
methods, unless stated otherwise; please refer to the appropriate Class documentation
One more modifier exists:

    BODY

which means that the method expects HTTP Body part; it also specifies a particular Class, just like RET.

Finally, all API methods expect an auth header, unless stated otherwise;
Currently (2015-07-20) a BASIC auth header is used:

    Authentication: Basic base64(username:password)

It is important to note, that username takes the following form:

    partitionId.actualUsername

This allows same username/email/etc to be used in separate partitions;
This will be changed into a more secure scheme at a later date, when the basic functionality of the app has been
realized and somewhat tested.

Customer API:

1)
    POST  /customer/insert
    BODY  com.superum.api.customer.FullCustomer
    RET   com.superum.api.customer.FullCustomer

    This method does one of the following:
    a) if id field of FullCustomer is set, it creates a new customer;
    b) if id field of FullCustomer is not set, it updates an existing customer;

    In case of a), all mandatory fields must be set, otherwise the creation will fail;
    In case of b), at least one field, besides the id, must be set, otherwise the update will fail;

    In both cases, the returned FullCustomer is the inserted one;
    In case of a), the id field will be set;
    In case of b), all the missing fields will be set

2)




API V1:

Below is a rough explanation of v1 API; for all intents and purposes it is deprecated, with the exception of everything,
that is also documented above;

PREFIX:

http://{IP}:{PORT}

POST /pictures/upload
POST /documents/upload
GET /pictures/{pictureName}
GET /documents/{documentName}
DELETE /pictures/{pictureName}
DELETE /documents/{documentName}

PREFIX:

http://{IP}:{PORT}/timestar/api

/add - pridėti naują
/{id} - rodyti pagal ID (žiūrėti šitą JSON formatui)
/update - pataisyti (taisomos visos reikšmės išskyrūs ID!)
/delete/{id} - ištrinti pagal ID
/all - rodyti visus
/{table}/{id} - rodyti visus tam tikram apribojimui, pvz /teacher/customer/1 - rodo visus mokytojus įmonei, kurios ID = 1

------------------------------------------------------------------------------------
Teacher:

POST /teacher/add
GET /teacher/{id}
POST /teacher/update
DELETE /teacher/delete/{id}
GET /teacher/all

------------------------------------------------------------------------------------
Teacher language:

POST /teacher/lang/add
GET /teacher/lang/{teacherId}
POST /teacher/lang/update
GET /teacher/lang/delete/{teacherId}
POST /teacher/lang/delete

------------------------------------------------------------------------------------
Teacher contract:

POST /teacher/contract/add
GET /teacher/contract/{teacherId}
POST /teacher/contract/update
GET /teacher/contract/delete/{teacherId}

------------------------------------------------------------------------------------
Customer:

POST /customer/add
GET /customer/{id}
POST /customer/update
GET /customer/delete/{id}
GET /customer/teacher/{teacherId}
GET /customer/all

------------------------------------------------------------------------------------
Customer contract:

POST /customer/contract/add
GET /customer/contract/{customerId}
POST /customer/contract/update
GET /customer/contract/delete/{customerId}

------------------------------------------------------------------------------------
Group:

POST /group/add
GET /group/{id}
POST /group/update
GET /group/delete/{id}
GET /group/customer/{customerId}
GET /group/teacher/{teacherId}
GET /group/customer/{customerId}/teacher/{teacherId}
GET /group/all

------------------------------------------------------------------------------------
Student:

POST /student/add
GET /student/{id}
POST /student/update
GET /student/delete/{id}
GET /student/customer/{customerId}
GET /student/group/{groupId}
GET /student/lesson/{lessonId}

------------------------------------------------------------------------------------
Lesson:

POST /lesson/add
GET /lesson/{id}
POST /lesson/update
GET /lesson/delete/{id}

GET /lesson/teacher/{teacherId}
GET /lesson/customer/{customerId}
GET /lesson/group/{groupId}
optional: ?start={Date}&end={Date}
/lesson/teacher/1
/lesson/customer/1?start=2015-06-01
/lesson/group/1?end=2015-06-30
/lesson/teacher/1?start=2015-06-01&end=2015-06-30

------------------------------------------------------------------------------------
Attendance:

POST lesson/attendance/add
GET lesson/attendance/{lessonId}
POST lesson/attendance/update
GET lesson/attendance/delete/{lessonId}
POST lesson/attendance/delete

------------------------------------------------------------------------------------
Lesson table:

GET /lesson/table
GET /lesson/table/{page}
optional: ?per_page={int}&start={Date}&end={Date}
/lesson/table
/lesson/table/0?per_page=100
/lesson/table/1?start=2015-06-26
/lesson/table/100?start=2015-06-26&end=2015-07-26

