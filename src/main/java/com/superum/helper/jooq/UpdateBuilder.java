package com.superum.helper.jooq;

import org.jooq.*;

import java.util.function.Function;
import java.util.function.Predicate;

/**
 * <pre>
 * Builds an UpdateSetMoreStep only from certain set fields of a given object
 *
 * Please refer to implementations of API v2 DAO/Queries interfaces for examples
 * </pre>
 * @param <Entity> a class that holds the values to update the fields with
 * @param <TableRecord> jooq Record type for the table that will be updated
 */
public final class UpdateBuilder<Entity, TableRecord extends Record> {

    /**
     * <pre>
     * Checks if some field is set, and if it is, adds the table field and the value to the UpdateSetStep
     * </pre>
     * @param hasField a predicate which checks if a field is set, probably a method reference, i.e. Entity::hasId
     * @param tableField a field of the table that should be set to the value (if this value is present)
     * @param getter a function which retrieves the field's value, probably a method reference, i.e. Entity::getId
     * @param <T> the type of the table field and the object returned by getter
     *
     * @return this builder
     *
     * @throws IllegalArgumentException if any arguments are null
     */
    public <T> UpdateBuilder<Entity, TableRecord> setField(Predicate<Entity> hasField, TableField<TableRecord, T> tableField,  Function<Entity, T> getter) {
        if (hasField == null)
            throw new IllegalArgumentException("Predicate to check if field is set cannot be null");

        if (tableField == null)
            throw new IllegalArgumentException("Table field cannot be null");

        if (getter == null)
            throw new IllegalArgumentException("Value getter cannot be null");

        if (hasField.test(entity))
            step = step.set(tableField, getter.apply(entity));
        return this;
    }

    /**
     * @return the UpdateSetMoreStep generated by this builder
     *
     * @throws IllegalStateException if no steps were given to the builder
     */
    public UpdateSetMoreStep<TableRecord> finalStep() {
        if (!(step instanceof UpdateSetMoreStep))
            throw new IllegalStateException("You haven't specified enough steps for the final step to work!");

        return (UpdateSetMoreStep<TableRecord>) step;
    }

    // CONSTRUCTORS

    public UpdateBuilder(Entity entity, DSLContext sql, Table<TableRecord> table) {
        if (entity == null)
            throw new IllegalArgumentException("Entity cannot be null");

        if (sql == null)
            throw new IllegalArgumentException("DSLContext cannot be null");

        if (table == null)
            throw new IllegalArgumentException("Updated table cannot be null");

        this.entity = entity;
        this.step = sql.update(table);
    }

    // PRIVATE

    private final Entity entity;
    private UpdateSetStep<TableRecord> step;

}
